version: '3.8'

services:
  stripe-cli:
    image: stripe/stripe-cli
    container_name: stripe-cli
    command: "listen --api-key ${STRIPE_SECRET_KEY} --forward-to 192.168.0.6:3000/orders/stripe_webhook"
    env_file:
      - .env.docker
    networks:
      system-design:
        ipv4_address: 192.168.0.2
  db:
    image: 'postgres:latest'
    restart: always
    container_name: system-design-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      system-design:
        ipv4_address: 192.168.0.3
  cache:
    image: redis:6.2-alpine
    restart: always
    container_name: system-design-cache
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - cache:/data
    networks:
      system-design:
        ipv4_address: 192.168.0.4
  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      system-design:
        ipv4_address: 192.168.0.5
  api-1:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: api-1
    restart: unless-stopped
    stdin_open: true
    env_file:
      - ./.env.docker
    tty: true
    depends_on:
      - db
      - stripe-cli
      - cache
    networks:
      system-design:
        ipv4_address: 192.168.0.6
  api-2:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: api-2
    restart: unless-stopped
    stdin_open: true
    env_file:
      - ./.env.docker
    tty: true
    depends_on:
      - db
      - stripe-cli
      - cache
    networks:
      system-design:
        ipv4_address: 192.168.0.7
  products:
    build:
      context: .
      dockerfile: Dockerfile.products
    container_name: products
    restart: unless-stopped
    stdin_open: true
    env_file:
      - ./.env.docker
    tty: true
    depends_on:
      - db
      - stripe-cli
      - cache
    networks:
      system-design:
        ipv4_address: 192.168.0.8
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    tty: true
    depends_on:
      - api-1
      - api-2
    ports:
      - "8080:80"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
    networks:
      system-design:
        ipv4_address: 192.168.0.9
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - api-1
      - api-2
    ports:
      - "9090:9090"
    networks:
      system-design:
        ipv4_address: 192.168.0.10
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
  grafana:
    image: grafana/grafana:latest
    container_name: monitoring_grafana
    restart: unless-stopped
    depends_on:
      - prometheus
      - db
    links:
      - prometheus:prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=12345
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=db:5432
      - GF_DATABASE_NAME=postgres
      - GF_DATABASE_USER=postgres
      - GF_DATABASE_PASSWORD=postgres
      - GF_DATABASE_SSL_MODE=disable
    ports:
      - "3000:3000"
    networks:
      system-design:
        ipv4_address: 192.168.0.11
    volumes:
      - grafana-storage:/var/lib/grafana

volumes:
  db:
    driver: local
  cache:
    driver: local
  rabbit_data:
    driver: local
  grafana-storage:
    driver: local

networks:
  system-design:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.0.0/16
          gateway: 192.168.0.1
